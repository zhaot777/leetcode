class Solution {
    // bfs
    public List<List<Integer>> subsets_bfs(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        res.add(new ArrayList<Integer>());
        for (int num: nums) {
            List<List<Integer>> tmp = new ArrayList<List<Integer>>();
            // deep copy
            for (List<Integer> list: res) tmp.add(new ArrayList<Integer>(list));
            for (List<Integer> list: tmp) list.add(num);
            res.addAll(tmp);
        }
        return res;
    }
    // dfs
    private void dfs(List<List<Integer>> res, List<Integer> list, int[] nums, int i) {
        if (i == nums.length) {
            res.add(list);
            return;
        }
        // choose 1: don't add item i
        dfs(res, new ArrayList(list), nums, i+1);
        // choose 2: add item i
        list.add(nums[i]);
        dfs(res, new ArrayList(list), nums, i+1);
    }
    public List<List<Integer>> subsets_dfs(int[] nums) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        dfs(res, new ArrayList<Integer>(), nums, 0);
        return res;
    }
}
