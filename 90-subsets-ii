// bfs:
import java.util.Arrays;
class Solution1 {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        Set<List<Integer>> sets = new HashSet<>();
        sets.add(new ArrayList<>());
        for (int i = 0; i < nums.length; i++) {
            Set<List<Integer>> tmp = new HashSet<>();
            for (List list: sets) tmp.add(new ArrayList<>(list));
            for (List list: tmp) list.add(nums[i]);
            sets.addAll(tmp);
        }
        List<List<Integer>> res = new ArrayList<>();
        for (List list: sets) res.add(new ArrayList<>(list));
        return res;
    }
}

// dfs:
class Solution2 {
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<Integer> list = new ArrayList<>();
        Set<List<Integer>> output = new HashSet<>();
        helper(nums, 0, list, output);

        return new ArrayList<>(output);
    }

    public void helper(int arr[], int sI, List<Integer> list, Set<List<Integer>> output){
        if(sI == arr.length){
            output.add(list);
            return;
        }

        // not adding first element;
        helper(arr, sI+1, new ArrayList<Integer>(list), output);
        // adding first element;
        list.add(arr[sI]);
        helper(arr, sI+1, new ArrayList<Integer>(list), output);
        return;
    }
}
